// Prisma schema for Prior-Auth Fastlane MVP
// Database: Neon Serverless Postgres
// ORM: Prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// ============================================
// Core Tables
// ============================================

model Tenant {
  id         String   @id @default(uuid()) @db.Uuid
  slug       String   @unique @db.VarChar(100)
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  users      User[]
  ingestions Ingestion[]
  cases      Case[]
  rulesets   Ruleset[]
  events     Event[]
  audit_logs AuditLog[]

  @@map("tenants")
}

model User {
  id         String   @id @default(uuid()) @db.Uuid
  tenant_id  String   @db.Uuid
  email      String   @db.VarChar(255)
  name       String?  @db.VarChar(255)
  role       String   @db.VarChar(50) // e.g., 'admin', 'clinician', 'staff'
  auth_id    String?  @unique @db.VarChar(255) // Neon Auth user ID
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  tenant         Tenant     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  created_cases  Case[]     @relation("CaseCreator")
  assigned_tasks Task[]
  created_events Event[]
  created_audits AuditLog[]

  @@unique([email, tenant_id])
  @@index([tenant_id])
  @@index([auth_id])
  @@map("users")
}

model Ingestion {
  id              String   @id @default(uuid()) @db.Uuid
  tenant_id       String   @db.Uuid
  source_type     String   @db.VarChar(50) // 'email' or 'pdf'
  source_metadata Json     @db.JsonB // email metadata or PDF metadata
  storage_path    String?  @db.Text // R2 path to stored file
  status          String   @db.VarChar(50) // 'pending', 'processing', 'completed', 'failed'
  error_message   String?  @db.Text
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  tenant Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  cases  Case[]

  @@index([tenant_id])
  @@index([status])
  @@index([created_at])
  @@map("ingestions")
}

model Case {
  id              String   @id @default(uuid()) @db.Uuid
  tenant_id       String   @db.Uuid
  ingestion_id    String?  @db.Uuid
  created_by      String   @db.Uuid
  member_id_hash  String   @db.VarChar(255) // Hashed member ID (no PHI)
  payer           String   @db.VarChar(255)
  status          String   @db.VarChar(50) // 'pending', 'approved', 'denied', 'more_info_needed'
  priority        String   @default("normal") @db.VarChar(50) // 'low', 'normal', 'high', 'urgent'
  diagnosis_codes String[] @db.VarChar(20)
  confidence_json Json     @db.JsonB // LLM confidence scores
  extracted_data  Json     @db.JsonB // Raw extracted data from PDF/email
  metadata_json   Json?    @db.JsonB // Additional metadata
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  tenant    Tenant     @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  ingestion Ingestion? @relation(fields: [ingestion_id], references: [id], onDelete: SetNull)
  creator   User       @relation("CaseCreator", fields: [created_by], references: [id], onDelete: Cascade)
  codes     CaseCode[]
  tasks     Task[]

  @@index([tenant_id])
  @@index([member_id_hash])
  @@index([status])
  @@index([priority])
  @@index([payer])
  @@index([created_at])
  @@map("cases")
}

model CaseCode {
  id          String   @id @default(uuid()) @db.Uuid
  case_id     String   @db.Uuid
  code_type   String   @db.VarChar(50) // 'CPT', 'HCPCS'
  code        String   @db.VarChar(20)
  description String?  @db.Text
  confidence  Float?   @db.DoublePrecision // LLM confidence score
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  case Case @relation(fields: [case_id], references: [id], onDelete: Cascade)

  @@index([case_id])
  @@index([code_type, code])
  @@map("case_codes")
}

model Task {
  id           String    @id @default(uuid()) @db.Uuid
  case_id      String    @db.Uuid
  assigned_to  String?   @db.Uuid
  title        String    @db.VarChar(255)
  description  String?   @db.Text
  status       String    @default("pending") @db.VarChar(50) // 'pending', 'in_progress', 'completed', 'cancelled'
  priority     String    @default("normal") @db.VarChar(50) // 'low', 'normal', 'high', 'urgent'
  due_date     DateTime? @db.Timestamptz(6)
  completed_at DateTime? @db.Timestamptz(6)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @updatedAt @db.Timestamptz(6)

  // Relations
  case     Case  @relation(fields: [case_id], references: [id], onDelete: Cascade)
  assignee User? @relation(fields: [assigned_to], references: [id], onDelete: SetNull)

  @@index([case_id])
  @@index([assigned_to])
  @@index([status])
  @@index([due_date])
  @@map("tasks")
}

model Ruleset {
  id         String   @id @default(uuid()) @db.Uuid
  tenant_id  String   @db.Uuid
  payer      String   @db.VarChar(255)
  procedure  String   @db.VarChar(255)
  rules_json Json     @db.JsonB // Structured rules data
  is_active  Boolean  @default(true)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @updatedAt @db.Timestamptz(6)

  // Relations
  tenant Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)

  @@index([tenant_id])
  @@index([payer])
  @@index([procedure])
  @@index([is_active])
  @@map("rulesets")
}

model Event {
  id          String   @id @default(uuid()) @db.Uuid
  tenant_id   String   @db.Uuid
  user_id     String?  @db.Uuid
  event_type  String   @db.VarChar(100) // e.g., 'case_created', 'task_completed'
  entity_type String?  @db.VarChar(100) // 'case', 'task', 'user', etc.
  entity_id   String?  @db.Uuid
  metadata    Json?    @db.JsonB
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  tenant Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([tenant_id])
  @@index([event_type])
  @@index([entity_type, entity_id])
  @@index([created_at])
  @@map("events")
}

model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  tenant_id   String   @db.Uuid
  user_id     String?  @db.Uuid
  action      String   @db.VarChar(100) // 'create', 'update', 'delete', 'view'
  entity_type String   @db.VarChar(100) // 'case', 'task', 'user', etc.
  entity_id   String   @db.Uuid
  changes     Json?    @db.JsonB // Before/after diff
  ip_address  String?  @db.VarChar(45) // IPv4 or IPv6
  user_agent  String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)

  // Relations
  tenant Tenant @relation(fields: [tenant_id], references: [id], onDelete: Cascade)
  user   User?  @relation(fields: [user_id], references: [id], onDelete: SetNull)

  @@index([tenant_id])
  @@index([user_id])
  @@index([action])
  @@index([entity_type, entity_id])
  @@index([created_at])
  @@map("audit_logs")
}
