/classify_issue {"number":3,"title":"Feature: Database Setup with Neon Postgres and Prisma","body":"## Overview\nSet up Neon Serverless Postgres as the primary database with Prisma ORM. Implement the complete schema from plan.md to support the Prior-Auth MVP.\n\n## Requirements\n\n### Database Provider\n- Create Neon Postgres database (serverless)\n- Configure connection pooling\n- Enable encryption at rest\n- Set up environment variables for connection string\n\n### Prisma ORM Setup\n- Install Prisma CLI and client\n- Initialize Prisma schema\n- Configure for Neon Postgres (connection pooling support)\n- Set up migrations workflow\n\n### Schema Implementation\nImplement all tables from Section 7 of plan.md:\n\n**Core Tables:**\n- `tenants` - Multi-tenant isolation\n- `users` - User accounts with Neon Auth integration\n- `ingestions` - Email/PDF ingestion tracking\n- `cases` - Prior auth cases\n- `case_codes` - CPT/HCPCS codes per case\n- `tasks` - Action items per case\n- `rulesets` - Payer Ã— procedure rules\n- `events` - System events log\n- `audit_logs` - Audit trail\n\n### Key Features\n- Per-tenant scoping (tenant_id on all domain tables)\n- Timestamps (created_at, updated_at where appropriate)\n- JSON fields for flexible data (confidence_json, metadata_json, etc.)\n- Foreign key constraints and indexes\n- Migration files for schema versioning\n\n## Acceptance Criteria\n- [ ] Neon Postgres database created and accessible\n- [ ] Prisma schema matches plan.md Section 7 exactly\n- [ ] Initial migration runs successfully\n- [ ] Database connection works from Next.js app\n- [ ] Can create/read records in all tables\n- [ ] Tenant isolation is enforced in schema\n- [ ] Environment variables properly configured (.env.local)\n- [ ] README updated with database setup instructions\n\n## Technical Details\n- Database: Neon Serverless Postgres\n- ORM: Prisma (latest version)\n- Connection pooling: Yes (Neon supports this natively)\n- Migration strategy: Prisma Migrate\n\n## Notes\n- Do NOT include any PHI fields in default mode\n- Use `member_id_hash` instead of storing actual member IDs\n- Ensure all JSON fields are properly typed in Prisma schema\n- Follow Neon best practices for serverless environments\n- Include seed data script for development (optional)\n\n## Reference\nSee plan.md Section 7 (Data Storage & Schema) for complete schema details."}